const key = '3ca3ddde4d31b6ca655d12f13255cd0f';

const lat = 40.76650503524707;
const lon = -111.89508102764654;

const weatherUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${key}&units=imperial`;

async function weatherFetch() {
    try {
        const response = await fetch(weatherUrl);
        if (response.ok) {
            const data = await response.json();
            displayWeather(data);
        } else {
            throw Error(await response.text());
        }
    } catch (error) {
        console.log(error);
    }
}

const weather = document.querySelector('.weather ul');

function displayWeather(data) {
    // thanks to chatgpt for help converting sunrise and sunset
    // (code adapted by me)
    const options = { hour: 'numeric', minute: 'numeric' };

    const sunrise = new Date(data.sys.sunrise * 1000);
    const sunriseTime = new Intl.DateTimeFormat('en-US', options).format(sunrise);

    const sunset = new Date(data.sys.sunset * 1000);
    const sunsetTime = new Intl.DateTimeFormat('en-US', options).format(sunset);

    weather.innerHTML =
`<li>${data.main.temp}째 F</li>
<li>${data.weather[0].main}</li>
<li>High: ${data.main.temp_max}째</li>
<li>Low: ${data.main.temp_min}째</li>
<li>Humidity: ${data.main.humidity}%</li>
<li>Sunrise: ${sunriseTime}</li>
<li>Sunset: ${sunsetTime}</li>`;
}

weatherFetch();

const forecastUrl = `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${key}&units=imperial`;

async function forecastFetch() {
    try {
        const response = await fetch(forecastUrl);
        if (response.ok) {
            const data = await response.json();
            displayForecast(data);
        } else {
            throw Error(await response.text());
        }
    } catch (error) {
        console.log(error);
    }
}

const forecast = document.querySelector('.forecast tbody');
const today = new Date();

function displayForecast(data) {
    // thanks to chatgpt for help with this too
    // heavily modified by me
    const days = {};
    data.list.forEach(forecast => {
        const date = new Date((forecast.dt + data.city.timezone) * 1000);
        date.setHours(0);
        
        if (!days[date])
            days[date] = {
                high: forecast.main.temp,
                low: forecast.main.temp
            };
        else {
            days[date].high = Math.max(days[date].high, forecast.main.temp);
            days[date].low = Math.max(days[date].low, forecast.main.temp);
        }
        //const day = date.toLocaleDateString("en-US", { weekday: "short" });
    });

    let fContent = '';
    let i = 0;
    for (const [dateKey, temps] of Object.entries(days)) {
        i++;
        if (i > 3) break;
        const date = new Date(dateKey);
        const difference = CompareDays(today, date);
        const day = difference === 0
            ? 'Today'
            : difference === 1
                ? 'Tomorrow'
                : new Date(date).toLocaleDateString("en-US", { weekday: "long" });
        
        fContent +=
`<tr>
    <td>${day}:</td>
    <td>${temps.high}째 F</td>
</tr>`;
    }

    forecast.innerHTML = fContent;
}

// formula generated by chatgpt- adapted by me
function CompareDays(a, b)
{
    const a1 = new Date(a);
    a1.setHours(0, 0, 0, 0);

    const b1 = new Date(b);
    b1.setHours(0, 0, 0, 0);

    return (b1 - a1) / (1000 * 60 * 60 * 24);
}

forecastFetch();